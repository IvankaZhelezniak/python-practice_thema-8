# В програмуванні досить часто необхідно створити заповнену колекцію. 
# Зробити це одним виразом не можна, доводиться писати цикл. 
# Наприклад, щоб створити список квадратів чисел від 1 до 5, треба написати наступний код:
sq = []
for i in range(1, 6):
    sq.append(i**2)

print(sq)

# Подібні операції, які ми робимо зі змінюваними колекціями списків list,
#  словників dict та множин set у циклі for. Для спрощення таких операцій в Python ввели конструкції Comprehensions .

# Але Python дозволяє зробити це більш елегантно, використовуючи спискові вирази (list comprehensions).
# Спискові вирази дозволяють створювати списки за допомогою простого і зрозумілого синтаксису.

# Синтаксис спискового виразу: list comprehension
# [new_item for item in iterable if condition]

# наприклад, попередній приклад можна записати наступним чином:
sq = [x**2 for x in range(1, 6)]
print(sq)
# Це створює список квадратів чисел від 1 до 5, використовуючи один рядок коду.


#Умова в синтаксисі дозволяє нам створювати списки за якоюсь умовою. Створимо список квадратів парних чисел від 1 до 9:
even_squares = [x**2 for x in range(1, 10) if x % 2 == 0]
print(even_squares)



# Set comprehensions використовуються аналогічно list comprehensions, але для створення множин.
# {new_item for item in iterable if condition}

#Збережімо множини квадратів чисел зі списку:
numbers = [1, 4, 1, 3, 2, 5, 2, 6]
sq = {i ** 2 for i in numbers}
print(sq)
# Це створює множину квадратів чисел зі списку, видаляючи дублікати.

# Set Comprehensions також підтримує умови. Створимо множину квадратів непарних чисел від 1 до 9:
odd_squares = {x**2 for x in range(1, 10) if x % 2 != 0}
print(odd_squares)




# Dictionary comprehensions використовуються для створення нових словників. 
# Для словників синтаксис comprehension трохи відрізняється, оскільки потрібно явно вказати ключ та значення
# {key: value for item in iterable if condition}

# Створимо словник, де ключ - число, а значення - його квадрат.
sq = {x: x**2 for x in range(1, 10)}
print(sq)

# Створимо словник, де ключами будуть числа, а значеннями — їх квадрати, але тільки для чисел, що більші за 5:
sq_dict = {x: x**2 for x in range(1, 10) if x > 5}
print(sq_dict)

